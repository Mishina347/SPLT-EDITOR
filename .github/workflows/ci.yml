name: CI/CD Pipeline

on:
 push:
  branches: [main, develop]
 pull_request:
  branches: [main, develop]

jobs:
 test:
  runs-on: ubuntu-latest

  strategy:
   matrix:
    node-version: [18, 20]

  steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Setup Node.js ${{ matrix.node-version }}
     uses: actions/setup-node@v4
     with:
      node-version: ${{ matrix.node-version }}
      cache: 'npm'

   - name: Install dependencies
     run: npm ci

   - name: Run linting
     run: npm run lint

   - name: Run TypeScript check
     run: npm run type-check

   - name: Run tests with coverage
     run: npm run test:ci

   - name: Upload coverage to Codecov
     uses: codecov/codecov-action@v4
     if: matrix.node-version == 20
     with:
      file: ./coverage/lcov.info
      flags: unittests
      name: codecov-umbrella
      fail_ci_if_error: false

   - name: Build project
     run: npm run build

 build-tauri:
  runs-on: ${{ matrix.platform }}
  needs: test

  strategy:
   fail-fast: false
   matrix:
    platform: [ubuntu-20.04, windows-latest, macos-latest]

  steps:
   - name: Checkout code
     uses: actions/checkout@v4

   - name: Setup Node.js
     uses: actions/setup-node@v4
     with:
      node-version: 20
      cache: 'npm'

   - name: Install Rust
     uses: dtolnay/rust-toolchain@stable

   - name: Rust cache
     uses: swatinem/rust-cache@v2
     with:
      workspaces: './src-tauri -> target'

   - name: Install dependencies (Ubuntu only)
     if: matrix.platform == 'ubuntu-20.04'
     run: |
      sudo apt-get update
      sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

   - name: Install frontend dependencies
     run: npm ci

   - name: Build Tauri app
     uses: tauri-apps/tauri-action@v0
     env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     with:
      tagName: app-v__VERSION__
      releaseName: 'App v__VERSION__'
      releaseBody: 'See the assets to download this version and install.'
      releaseDraft: true
      prerelease: false

 dependabot-automerge:
  runs-on: ubuntu-latest
  needs: [test]
  if: github.actor == 'dependabot[bot]'
  permissions:
   contents: write
   pull-requests: write

  steps:
   - name: Dependabot metadata
     id: metadata
     uses: dependabot/fetch-metadata@v1
     with:
      github-token: '${{ secrets.GITHUB_TOKEN }}'

   - name: Auto-merge Dependabot PRs
     if: steps.metadata.outputs.update-type == 'version-update:semver-patch'
     run: gh pr merge --auto --merge "$PR_URL"
     env:
      PR_URL: ${{github.event.pull_request.html_url}}
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
