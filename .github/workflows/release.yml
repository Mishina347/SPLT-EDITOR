# 静的コンテンツを GitHub Pages にデプロイし、ビルド成果物をアーティファクトとして保存するワークフロー
name: Deploy static content to Pages and Save Build Artifacts

on:
  # 対象ブランチプッシュ時に実行されます
  push:
    branches: ['main']

  # リリース作成時に実行されます
  release:
    types: [published, created]

  # Actions タブから手動でワークフローを実行できるようにします
  workflow_dispatch:

# GITHUB_TOKEN のパーミッションを設定し、GitHub Pages へのデプロイを許可します
permissions:
  contents: read
  pages: write
  id-token: write

# 1 つの同時デプロイメントを可能にする
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # ビルドとデプロイのジョブ（mainブランチプッシュ時のみ）
  build-and-deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Build
        run: yarn build
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # dist フォルダーのアップロード
          path: './dist'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # ビルド成果物をアーティファクトとして保存するジョブ
  save-build-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Build
        run: yarn build
      
      - name: List dist contents
        run: |
          echo "=== Dist directory contents ==="
          ls -la dist/
          echo "=== Dist directory size ==="
          du -sh dist/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/
          retention-days: 30
          if-no-files-found: error
      
      - name: Create release assets
        run: |
          echo "=== Creating release assets ==="
          cd dist
          tar -czf ../build-artifacts.tar.gz .
          cd ..
          ls -la build-artifacts.tar.gz
      
      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: build-artifacts.tar.gz
          retention-days: 90
          if-no-files-found: error

  # Tauriビルドジョブ（mainブランチプッシュ時のみ）
  tauri-build:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
      
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update && sudo apt install gh -y
      
      - name: Build Tauri app
        run: yarn tauri build
      
      - name: List Tauri build outputs
        run: |
          echo "=== Tauri build outputs ==="
          ls -la src-tauri/target/release/
          echo "=== Tauri build size ==="
          du -sh src-tauri/target/release/
      
      - name: Upload Tauri artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-build
          path: |
            src-tauri/target/release/*.deb
            src-tauri/target/release/*.msi
            src-tauri/target/release/*.dmg
            src-tauri/target/release/*.app
          retention-days: 90
          if-no-files-found: warn

  # リリース作成時にビルド成果物をリリースにアップロードするジョブ
  upload-to-release:
    if: github.event_name == 'release'
    needs: [save-build-artifacts, tauri-build]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-dist
          path: ./dist
      
      - name: Download Tauri artifacts
        uses: actions/download-artifact@v4
        with:
          name: tauri-build
          path: ./tauri-build
      
      - name: Create release archive
        run: |
          echo "=== Creating release archive ==="
          cd dist
          tar -czf ../release-${GITHUB_REF_NAME}.tar.gz .
          cd ..
          ls -la release-${GITHUB_REF_NAME}.tar.gz
      
      - name: Upload to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release-${GITHUB_REF_NAME}.tar.gz
          asset_name: release-${GITHUB_REF_NAME}.tar.gz
          asset_content_type: application/gzip
