# 静的コンテンツを GitHub Pages にデプロイし、ビルド成果物をアーティファクトとして保存するワークフロー
name: Deploy static content to Pages and Save Build Artifacts

on:
  # 対象ブランチプッシュ時に実行されます
  push:
    branches: ['main']

  # リリース作成時に実行されます
  release:
    types: [published, created]

  # Actions タブから手動でワークフローを実行できるようにします
  workflow_dispatch:

# GITHUB_TOKEN のパーミッションを設定し、GitHub Pages へのデプロイを許可します
permissions:
  contents: read
  pages: write
  id-token: write

# 1 つの同時デプロイメントを可能にする
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # ビルドとデプロイのジョブ（mainブランチプッシュ時のみ）
  build-and-deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Build
        run: yarn build
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # dist フォルダーのアップロード
          path: './dist'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # ビルド成果物をアーティファクトとして保存するジョブ
  save-build-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Build
        run: yarn build
      
      - name: List dist contents
        run: |
          echo "=== Dist directory contents ==="
          ls -la dist/
          echo "=== Dist directory size ==="
          du -sh dist/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/
          retention-days: 30
          if-no-files-found: error
      
      - name: Create release assets
        run: |
          echo "=== Creating release assets ==="
          cd dist
          tar -czf ../build-artifacts.tar.gz .
          cd ..
          ls -la build-artifacts.tar.gz
      
      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: build-artifacts.tar.gz
          retention-days: 90
          if-no-files-found: error

  # Tauriビルドジョブ（Linux）（mainブランチプッシュ時のみ）
  tauri-build-linux:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build-and-deploy, save-build-artifacts]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Verify Web build completion
        run: |
          echo "=== Verifying Web build completion ==="
          echo "Web build and deploy job completed successfully"
          echo "Proceeding with Tauri build for Linux..."
          echo "=========================================="
      
      - name: Check package.json scripts
        run: |
          echo "=== Checking package.json scripts ==="
          echo "Using simplified Tauri scripts without cross-env"
          echo "Scripts: tauri:build, tauri:build:linux, tauri:build:macos, tauri:build:windows"
          echo "Environment variables set in GitHub Actions workflow"
          echo "================================================="
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          # 基本的なビルドツール
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            libssl-dev \
            pkg-config \
            cmake \
            ninja-build
          
          # GTKとWebKitの依存関係
          sudo apt-get install -y \
            libglib2.0-dev \
            libgtk-3-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf2.0-dev \
            libharfbuzz-dev \
            libfreetype6-dev \
            libfontconfig1-dev
          
          # WebKit2GTKの代替パッケージを試す
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev || \
            libwebkit2gtk-4.0-dev || \
            libwebkit2gtk-3.0-dev || \
            libwebkit2gtk-dev || \
            echo "WebKit2GTK not found, will try alternative approach"
          
          # WebKit2GTKが見つからない場合の代替手段
          if ! dpkg -l | grep -q libwebkit2gtk; then
            echo "Installing alternative WebView libraries..."
            sudo apt-get install -y \
              libgtk-3-dev \
              libwebkit2gtk-4.0-dev || \
              libwebkit2gtk-3.0-dev || \
              echo "Alternative WebView libraries not available"
          fi
          
          # その他の必要なライブラリ
          sudo apt-get install -y \
            libcups2-dev \
            libdrm-dev \
            libxkbcommon-dev \
            libx11-dev \
            libxext-dev \
            libxfixes-dev \
            libxrender-dev \
            libxrandr-dev \
            libxss-dev \
            libasound2-dev \
            libpulse-dev \
            libdbus-1-dev \
            libudev-dev \
            libsqlite3-dev \
            libxml2-dev \
            libcurl4-openssl-dev
      
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      
      - name: Check build environment
        run: |
          echo "=== Checking build environment ==="
          echo "Node version: $(node --version)"
          echo "Yarn version: $(yarn --version)"
          echo "Rust version: $(rustc --version)"
          echo "Current directory: $(pwd)"
          echo "================================"
      
      - name: Check WebKit2GTK status
        run: |
          echo "=== Checking WebKit2GTK status ==="
          dpkg -l | grep -i webkit || echo "No WebKit packages found"
          pkg-config --exists webkit2gtk-4.0 && echo "WebKit2GTK-4.0 found" || echo "WebKit2GTK-4.0 not found"
          pkg-config --exists webkit2gtk-3.0 && echo "WebKit2GTK-3.0 found" || echo "WebKit2GTK-3.0 not found"
          echo "=================================="
      
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update && sudo apt install gh -y
      
      - name: Build Tauri app (Linux)
        env:
          VITE_TAURI_PLATFORM: linux
          TAURI_PLATFORM: linux
          NODE_ENV: production
          RUST_BACKTRACE: 1
        run: |
          echo "=== Building Tauri app for Linux ==="
          echo "VITE_TAURI_PLATFORM: $VITE_TAURI_PLATFORM"
          echo "TAURI_PLATFORM: $TAURI_PLATFORM"
          echo "NODE_ENV: $NODE_ENV"
          echo "Using simplified script without cross-env"
          yarn tauri:build:linux
      
      - name: List Tauri build outputs (Linux)
        run: |
          echo "=== Tauri build outputs (Linux) ==="
          ls -la src-tauri/target/release/
          echo "=== Tauri bundle outputs (Linux) ==="
          ls -la src-tauri/target/release/bundle/
          echo "=== Tauri build size (Linux) ==="
          du -sh src-tauri/target/release/
          echo "=== Tauri bundle size (Linux) ==="
          du -sh src-tauri/target/release/bundle/
          echo "=== Environment variables used (Linux) ==="
          echo "VITE_TAURI_PLATFORM: $VITE_TAURI_PLATFORM"
          echo "TAURI_PLATFORM: $TAURI_PLATFORM"
          echo "NODE_ENV: $NODE_ENV"
      
      - name: Upload Tauri artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-build
          path: |
            src-tauri/target/release/bundle/**/*.deb
            src-tauri/target/release/bundle/**/*.AppImage
          retention-days: 90
          if-no-files-found: warn

  # Tauriビルドジョブ（macOS）（mainブランチプッシュ時のみ）
  tauri-build-macos:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build-and-deploy, save-build-artifacts]
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Verify Web build completion
        run: |
          echo "=== Verifying Web build completion ==="
          echo "Web build and deploy job completed successfully"
          echo "Proceeding with Tauri build for macOS..."
          echo "=========================================="
      
      - name: Check package.json scripts
        run: |
          echo "=== Checking package.json scripts ==="
          echo "Using simplified Tauri scripts without cross-env"
          echo "Scripts: tauri:build, tauri:build:linux, tauri:build:macos, tauri:build:windows"
          echo "Environment variables set in GitHub Actions workflow"
          echo "================================================="
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
      
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      
      - name: Check build environment (macOS)
        run: |
          echo "=== Checking build environment (macOS) ==="
          echo "Node version: $(node --version)"
          echo "Yarn version: $(yarn --version)"
          echo "Rust version: $(rustc --version)"
          echo "Current directory: $(pwd)"
          echo "Target: x86_64-apple-darwin"
          echo "====================================="
      
      - name: Build Tauri app (macOS)
        env:
          VITE_TAURI_PLATFORM: macos
          TAURI_PLATFORM: macos
          NODE_ENV: production
          RUST_BACKTRACE: 1
        run: |
          echo "=== Building Tauri app for macOS ==="
          echo "VITE_TAURI_PLATFORM: $VITE_TAURI_PLATFORM"
          echo "TAURI_PLATFORM: $TAURI_PLATFORM"
          echo "NODE_ENV: $NODE_ENV"
          echo "Using simplified script without cross-env"
          yarn tauri:build:macos
      
      - name: List Tauri build outputs
        run: |
          echo "=== Tauri build outputs ==="
          ls -la src-tauri/target/release/
          echo "=== Tauri bundle outputs ==="
          ls -la src-tauri/target/release/bundle/
          echo "=== Tauri build size ==="
          du -sh src-tauri/target/release/
          echo "=== Tauri bundle size ==="
          du -sh src-tauri/target/release/bundle/
      
      - name: Upload Tauri artifacts (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: tauri-build-macos
          path: |
            src-tauri/target/release/bundle/**/*.dmg
            src-tauri/target/release/bundle/**/*.app
          retention-days: 90
          if-no-files-found: warn

  # Tauriビルドジョブ（Windows）（mainブランチプッシュ時のみ）
  tauri-build-windows:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build-and-deploy, save-build-artifacts]
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Verify Web build completion
        run: |
          echo "=== Verifying Web build completion ==="
          echo "Web build and deploy job completed successfully"
          echo "Proceeding with Tauri build for Windows..."
          echo "=========================================="
      
      - name: Check package.json scripts
        run: |
          echo "=== Checking package.json scripts ==="
          echo "Using simplified Tauri scripts without cross-env"
          echo "Scripts: tauri:build, tauri:build:linux, tauri:build:macos, tauri:build:windows"
          echo "Environment variables set in GitHub Actions workflow"
          echo "================================================="
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
      
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      
      - name: Check build environment (Windows)
        run: |
          echo "=== Checking build environment (Windows) ==="
          echo "Node version: $(node --version)"
          echo "Yarn version: $(yarn --version)"
          echo "Rust version: $(rustc --version)"
          echo "Current directory: $(pwd)"
          echo "Target: x86_64-pc-windows-msvc"
          echo "======================================="
      
      - name: Build Tauri app (Windows)
        env:
          VITE_TAURI_PLATFORM: windows
          TAURI_PLATFORM: windows
          NODE_ENV: production
          RUST_BACKTRACE: 1
        run: |
          echo "=== Building Tauri app for Windows ==="
          echo "VITE_TAURI_PLATFORM: $VITE_TAURI_PLATFORM"
          echo "TAURI_PLATFORM: $TAURI_PLATFORM"
          echo "NODE_ENV: $NODE_ENV"
          echo "Using simplified script without cross-env"
          yarn tauri:build:windows
      
      - name: List Tauri build outputs
        run: |
          echo "=== Tauri build outputs ==="
          dir src-tauri\target\release
          echo "=== Tauri bundle outputs ==="
          dir src-tauri\target\release\bundle
      
      - name: Upload Tauri artifacts (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: tauri-build-windows
          path: |
            src-tauri/target/release/bundle/**/*.msi
            src-tauri/target/release/bundle/**/*.exe
          retention-days: 90
          if-no-files-found: warn

  # リリース作成時にビルド成果物をリリースにアップロードするジョブ
  upload-to-release:
    if: github.event_name == 'release'
    needs: [save-build-artifacts, tauri-build-linux, tauri-build-macos, tauri-build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-dist
          path: ./dist
      
      - name: Download Tauri artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: tauri-build
          path: ./tauri-build-linux
      
      - name: Download Tauri artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: tauri-build-windows
          path: ./tauri-build-windows
      
      - name: Download Tauri artifacts (macOS)
        uses: actions/download-artifact@v4
        with:
          name: tauri-build-macos
          path: ./tauri-build-macos
      
      - name: Create release archive
        run: |
          echo "=== Creating release archive ==="
          cd dist
          tar -czf ../release-${GITHUB_REF_NAME}.tar.gz .
          cd ..
          ls -la release-${GITHUB_REF_NAME}.tar.gz
          
          echo "=== Creating Tauri release archive (Linux) ==="
          cd tauri-build-linux
          tar -czf ../tauri-release-linux-${GITHUB_REF_NAME}.tar.gz .
          cd ..
          ls -la tauri-release-linux-${GITHUB_REF_NAME}.tar.gz
          
          echo "=== Creating Tauri release archive (macOS) ==="
          cd tauri-build-macos
          tar -czf ../tauri-release-macos-${GITHUB_REF_NAME}.tar.gz .
          cd ..
          ls -la tauri-release-macos-${GITHUB_REF_NAME}.tar.gz
          
          echo "=== Creating Tauri release archive (Windows) ==="
          cd tauri-build-windows
          tar -czf ../tauri-release-windows-${GITHUB_REF_NAME}.tar.gz .
          cd ..
          ls -la tauri-release-windows-${GITHUB_REF_NAME}.tar.gz
      
      - name: Upload Web Release to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release-${GITHUB_REF_NAME}.tar.gz
          asset_name: release-${GITHUB_REF_NAME}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Tauri Release (Linux) to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./tauri-release-linux-${GITHUB_REF_NAME}.tar.gz
          asset_name: tauri-release-linux-${GITHUB_REF_NAME}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Tauri Release (macOS) to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./tauri-release-macos-${GITHUB_REF_NAME}.tar.gz
          asset_name: tauri-release-macos-${GITHUB_REF_NAME}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Tauri Release (Windows) to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./tauri-release-windows-${GITHUB_REF_NAME}.tar.gz
          asset_name: tauri-release-windows-${GITHUB_REF_NAME}.tar.gz
          asset_content_type: application/gzip
