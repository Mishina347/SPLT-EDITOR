# 静的コンテンツを GitHub Pages にデプロイし、ビルド成果物をアーティファクトとして保存するワークフロー
name: Deploy static content to Pages and Save Build Artifacts

on:
  # 対象ブランチプッシュ時に実行されます
  push:
    branches: ['main']

  # リリース作成時に実行されます
  release:
    types: [published, created]

  # Actions タブから手動でワークフローを実行できるようにします
  workflow_dispatch:

# GITHUB_TOKEN のパーミッションを設定し、GitHub Pages へのデプロイを許可します
permissions:
  contents: read
  pages: write
  id-token: write

# 1 つの同時デプロイメントを可能にする
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # ビルドとデプロイのジョブ（mainブランチプッシュ時のみ）
  build-and-deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Build
        run: yarn build
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # dist フォルダーのアップロード
          path: './dist'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # ビルド成果物をアーティファクトとして保存するジョブ
  save-build-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Build
        run: yarn build
      
      - name: List dist contents
        run: |
          echo "=== Dist directory contents ==="
          ls -la dist/
          echo "=== Dist directory size ==="
          du -sh dist/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/
          retention-days: 30
          if-no-files-found: error
      
      - name: Create release assets
        run: |
          echo "=== Creating release assets ==="
          cd dist
          tar -czf ../build-artifacts.tar.gz .
          cd ..
          ls -la build-artifacts.tar.gz
      
      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: build-artifacts.tar.gz
          retention-days: 90
          if-no-files-found: error

  # Tauriビルドジョブ（Linux）（mainブランチプッシュ時のみ）
  tauri-build-linux:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build-and-deploy, save-build-artifacts]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Verify Web build completion
        run: |
          echo "=== Verifying Web build completion ==="
          echo "Web build and deploy job completed successfully"
          echo "Proceeding with Tauri build for Linux..."
          echo "=========================================="
      
      - name: Check package.json scripts
        run: |
          echo "=== Checking package.json scripts ==="
          echo "Using simplified Tauri scripts without cross-env"
          echo "Scripts: tauri:build, tauri:build:linux, tauri:build:macos, tauri:build:windows"
          echo "Environment variables set in GitHub Actions workflow"
          echo "================================================="
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          # 基本的なビルドツール
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            libssl-dev \
            pkg-config \
            cmake \
            ninja-build
          
          # GTKとWebKitの依存関係
          sudo apt-get install -y \
            libglib2.0-dev \
            libgtk-3-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf2.0-dev \
            libharfbuzz-dev \
            libfreetype6-dev \
            libfontconfig1-dev
          
          # WebKit2GTKの代替パッケージを試す
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev || \
            libwebkit2gtk-4.0-dev || \
            libwebkit2gtk-3.0-dev || \
            libwebkit2gtk-dev || \
            echo "WebKit2GTK not found, will try alternative approach"
          
          # WebKit2GTKが見つからない場合の代替手段
          if ! dpkg -l | grep -q libwebkit2gtk; then
            echo "Installing alternative WebView libraries..."
            sudo apt-get install -y \
              libgtk-3-dev \
              libwebkit2gtk-4.0-dev || \
              libwebkit2gtk-3.0-dev || \
              echo "Alternative WebView libraries not available"
          fi
          
          # その他の必要なライブラリ
          sudo apt-get install -y \
            libcups2-dev \
            libdrm-dev \
            libxkbcommon-dev \
            libx11-dev \
            libxext-dev \
            libxfixes-dev \
            libxrender-dev \
            libxrandr-dev \
            libxss-dev \
            libasound2-dev \
            libpulse-dev \
            libdbus-1-dev \
            libudev-dev \
            libsqlite3-dev \
            libxml2-dev \
            libcurl4-openssl-dev \
            fuse \
            libfuse2 \
            libfuse-dev
      
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      
      - name: Install AppImage tools
        run: |
          echo "=== Installing AppImage creation tools ==="
          
          # 利用可能なバージョンを確認
          echo "Checking available versions..."
          
          # linuxdeployの最新リリースを取得
          LINUXDEPLOY_VERSION=$(curl -s https://api.github.com/repos/linuxdeploy/linuxdeploy/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Latest linuxdeploy version: $LINUXDEPLOY_VERSION"
          
          # linuxdeployのインストール
          wget -O linuxdeploy-x86_64.AppImage "https://github.com/linuxdeploy/linuxdeploy/releases/download$LINUXDEPLOY_VERSION/linuxdeploy-x86_64.AppImage"
          chmod +x linuxdeploy-x86_64.AppImage
          sudo mv linuxdeploy-x86_64.AppImage /usr/local/bin/linuxdeploy
          
          # linuxdeploy-plugin-appimageの最新リリースを取得
          PLUGIN_VERSION=$(curl -s https://api.github.com/repos/linuxdeploy/appimage-plugin/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Latest plugin version: $PLUGIN_VERSION"
          
          # linuxdeploy-plugin-appimageのインストール
          wget -O linuxdeploy-plugin-appimage-x86_64.AppImage "https://github.com/linuxdeploy/appimage-plugin/releases/download/$PLUGIN_VERSION/linuxdeploy-plugin-appimage-x86_64.AppImage"
          chmod +x linuxdeploy-plugin-appimage-x86_64.AppImage
          sudo mv linuxdeploy-plugin-appimage-x86_64.AppImage /usr/local/bin/linuxdeploy-plugin-appimage
          
          # インストール確認
          if linuxdeploy --version && linuxdeploy-plugin-appimage --version; then
            echo "=== AppImage tools installed successfully ==="
          else
            echo "=== AppImage tools installation failed, using fallback ==="
            echo "Will attempt to build without AppImage support"
            
            # 基本的なツールの確認
            which wget || echo "wget not found"
            which curl || echo "curl not found"
            
            # 代替手段の準備
            echo "Preparing fallback build configuration..."
          fi
      
      - name: Check build environment
        run: |
          echo "=== Checking build environment ==="
          echo "Node version: $(node --version)"
          echo "Yarn version: $(yarn --version)"
          echo "Rust version: $(rustc --version)"
          echo "Current directory: $(pwd)"
          echo "================================"
      
      - name: Check WebKit2GTK status
        run: |
          echo "=== Checking WebKit2GTK status ==="
          dpkg -l | grep -i webkit || echo "No WebKit packages found"
          pkg-config --exists webkit2gtk-4.0 && echo "WebKit2GTK-4.0 found" || echo "WebKit2GTK-4.0 not found"
          pkg-config --exists webkit2gtk-3.0 && echo "WebKit2GTK-3.0 found" || echo "WebKit2GTK-3.0 not found"
          echo "=================================="
      
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update && sudo apt install gh -y
      
      - name: Build Tauri app (Linux)
        env:
          VITE_TAURI_PLATFORM: linux
          TAURI_PLATFORM: linux
          NODE_ENV: production
          RUST_BACKTRACE: 1
          # AppImage作成のための環境変数
          LINUXDEPLOY: /usr/local/bin/linuxdeploy
          LINUXDEPLOY_PLUGIN_APPIMAGE: /usr/local/bin/linuxdeploy-plugin-appimage
        run: |
          echo "=== Building Tauri app for Linux ==="
          echo "VITE_TAURI_PLATFORM: $VITE_TAURI_PLATFORM"
          echo "TAURI_PLATFORM: $TAURI_PLATFORM"
          echo "NODE_ENV: $NODE_ENV"
          echo "LINUXDEPLOY: $LINUXDEPLOY"
          echo "LINUXDEPLOY_PLUGIN_APPIMAGE: $LINUXDEPLOY_PLUGIN_APPIMAGE"
          echo "Using simplified script without cross-env"
          
          # AppImage作成ツールの確認
          which linuxdeploy
          which linuxdeploy-plugin-appimage
          
          # Tauriビルドの実行
          if command -v linuxdeploy >/dev/null 2>&1 && command -v linuxdeploy-plugin-appimage >/dev/null 2>&1; then
            echo "=== AppImage tools available, building with AppImage support ==="
            yarn tauri:build:linux
          else
            echo "=== AppImage tools not available, building without AppImage ==="
            echo "Setting TAURI_BUNDLE_APPIMAGE=false"
            export TAURI_BUNDLE_APPIMAGE=false
            yarn tauri:build:linux
          fi
      
      - name: List Tauri build outputs (Linux)
        run: |
          echo "=== Tauri build outputs (Linux) ==="
          ls -la src-tauri/target/release/
          echo "=== Tauri bundle outputs (Linux) ==="
          ls -la src-tauri/target/release/bundle/
          echo "=== AppImage files (if any) ==="
          find src-tauri/target/release/bundle -name "*.AppImage" -exec ls -la {} \;
          echo "=== Tauri build size (Linux) ==="
          du -sh src-tauri/target/release/
          echo "=== Tauri bundle size (Linux) ==="
          du -sh src-tauri/target/release/bundle/
          echo "=== Environment variables used (Linux) ==="
          echo "VITE_TAURI_PLATFORM: $VITE_TAURI_PLATFORM"
          echo "TAURI_PLATFORM: $TAURI_PLATFORM"
          echo "NODE_ENV: $NODE_ENV"
          echo "LINUXDEPLOY: $LINUXDEPLOY"
          echo "LINUXDEPLOY_PLUGIN_APPIMAGE: $LINUXDEPLOY_PLUGIN_APPIMAGE"
      
      - name: Upload Tauri artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-build
          path: |
            src-tauri/target/release/bundle/**/*.deb
            src-tauri/target/release/bundle/**/*.AppImage
          retention-days: 90
          if-no-files-found: warn

  # Tauriビルドジョブ（macOS）（mainブランチプッシュ時のみ）
  tauri-build-macos:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build-and-deploy, save-build-artifacts]
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Verify Web build completion
        run: |
          echo "=== Verifying Web build completion ==="
          echo "Web build and deploy job completed successfully"
          echo "Proceeding with Tauri build for macOS..."
          echo "=========================================="
      
      - name: Check package.json scripts
        run: |
          echo "=== Checking package.json scripts ==="
          echo "Using simplified Tauri scripts without cross-env"
          echo "Scripts: tauri:build, tauri:build:linux, tauri:build:macos, tauri:build:windows"
          echo "Environment variables set in GitHub Actions workflow"
          echo "================================================="
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
      
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      
      - name: Check build environment (macOS)
        run: |
          echo "=== Checking build environment (macOS) ==="
          echo "Node version: $(node --version)"
          echo "Yarn version: $(yarn --version)"
          echo "Rust version: $(rustc --version)"
          echo "Current directory: $(pwd)"
          echo "Target: x86_64-apple-darwin"
          echo "====================================="
      
      - name: Build Tauri app (macOS)
        env:
          VITE_TAURI_PLATFORM: macos
          TAURI_PLATFORM: macos
          NODE_ENV: production
          RUST_BACKTRACE: 1
          # macOSアプリの署名とバンドル設定
          TAURI_BUNDLE_APPLE_ID: ""
          TAURI_BUNDLE_APPLE_ID_PROVIDER: ""
          TAURI_BUNDLE_APPLE_SIGNING_IDENTITY: ""
          TAURI_BUNDLE_APPLE_TEAM_ID: ""
          # 署名なしでビルド（開発用）
          TAURI_BUNDLE_SIGN: false
        run: |
          echo "=== Building Tauri app for macOS ==="
          echo "VITE_TAURI_PLATFORM: $VITE_TAURI_PLATFORM"
          echo "TAURI_PLATFORM: $TAURI_PLATFORM"
          echo "NODE_ENV: $NODE_ENV"
          echo "TAURI_BUNDLE_SIGN: $TAURI_BUNDLE_SIGN"
          echo "Using simplified script without cross-env"
          
          # ビルド前の環境確認
          echo "=== Build environment check ==="
          echo "Current directory: $(pwd)"
          echo "Rust target: $(rustc --print target-list | grep apple)"
          
          # Tauriビルドの実行
          yarn tauri:build:macos
      
      - name: List Tauri build outputs
        run: |
          echo "=== Tauri build outputs ==="
          ls -la src-tauri/target/release/
          echo "=== Tauri bundle outputs ==="
          ls -la src-tauri/target/release/bundle/
          echo "=== Tauri build size ==="
          du -sh src-tauri/target/release/
          echo "=== Tauri bundle size ==="
          du -sh src-tauri/target/release/bundle/
          
          # ファイルの整合性を確認
          echo "=== File integrity check ==="
          cd src-tauri/target/release/bundle
          
          # .appファイルの確認
          for app_file in *.app; do
            if [ -d "$app_file" ]; then
              echo "Checking $app_file..."
              echo "  Size: $(du -sh "$app_file")"
              echo "  Contents: $(ls "$app_file" | head -3 | tr '\n' ' ')"
              
              # アプリバンドルの詳細構造を確認
              echo "  Bundle structure:"
              echo "    Contents: $(ls "$app_file/Contents" 2>/dev/null || echo "No Contents directory")"
              echo "    MacOS: $(ls "$app_file/Contents/MacOS" 2>/dev/null || echo "No MacOS directory")"
              echo "    Info.plist: $(test -f "$app_file/Contents/Info.plist" && echo "Exists" || echo "Missing")"
              
              # 実行可能ファイルの確認
              if [ -d "$app_file/Contents/MacOS" ]; then
                for exe in "$app_file/Contents/MacOS"/*; do
                  if [ -f "$exe" ]; then
                    echo "    Executable: $(basename "$exe")"
                    echo "      Size: $(du -sh "$exe")"
                    echo "      Permissions: $(ls -la "$exe" | awk '{print $1}')"
                    echo "      Type: $(file "$exe" 2>/dev/null || echo "Unknown")"
                  fi
                done
              fi
              
              # アプリの署名状態を確認
              echo "    Code signing:"
              if command -v codesign >/dev/null 2>&1; then
                codesign -dv "$app_file" 2>&1 | head -3 || echo "      Not signed or signing error"
              else
                echo "      codesign command not available"
              fi
            fi
          done
          
          # .dmgファイルの確認
          for dmg_file in *.dmg; do
            if [ -f "$dmg_file" ]; then
              echo "Checking $dmg_file..."
              echo "  Size: $(du -sh "$dmg_file")"
              echo "  File type: $(file "$dmg_file")"
            fi
          done
          
          cd ../../../..
      
      - name: Create macOS bundle archive
        run: |
          echo "=== Creating macOS bundle archive ==="
          cd src-tauri/target/release/bundle
          
          # 利用可能なファイルを確認
          echo "Available files:"
          ls -la
          
          # .appファイルを個別に圧縮（より安全な方法）
          for app_file in *.app; do
            if [ -d "$app_file" ]; then
              echo "Compressing $app_file..."
              
              # アプリバンドルの整合性を事前確認
              echo "  Pre-compression check:"
              echo "    Bundle size: $(du -sh "$app_file")"
              echo "    Contents count: $(find "$app_file" -type f | wc -l)"
              
              # より安全な圧縮方法を使用（シンボリックリンクを保持）
              tar --exclude='*.DS_Store' --exclude='__pycache__' --exclude='*.log' -czf "${app_file}.tar.gz" "$app_file"
              
              # 圧縮後の確認
              ls -la "${app_file}.tar.gz"
              echo "  Archive size: $(du -sh "${app_file}.tar.gz")"
              
              # アーカイブの整合性を確認
              echo "  Verifying archive integrity..."
              if tar -tzf "${app_file}.tar.gz" >/dev/null 2>&1; then
                echo "    ✓ Archive is valid"
                echo "    Contents preview:"
                tar -tzf "${app_file}.tar.gz" | head -5
              else
                echo "    ✗ Archive is corrupted - removing"
                rm -f "${app_file}.tar.gz"
              fi
            fi
          done
          
          # .dmgファイルを個別に圧縮
          for dmg_file in *.dmg; do
            if [ -f "$dmg_file" ]; then
              echo "Compressing $dmg_file..."
              # .dmgファイルは直接圧縮
              tar -czf "${dmg_file}.tar.gz" "$dmg_file"
              ls -la "${dmg_file}.tar.gz"
              echo "Verifying archive integrity..."
              tar -tzf "${dmg_file}.tar.gz" | head -3
            fi
          done
          
          # 全体を圧縮（より安全な方法）
          echo "Creating complete bundle archive..."
          tar --exclude='*.DS_Store' --exclude='__pycache__' -czf macos-bundle.tar.gz .
          ls -la macos-bundle.tar.gz
          echo "=== Archive sizes ==="
          du -sh *.tar.gz
          
          # アーカイブの整合性を確認
          echo "=== Verifying archive integrity ==="
          for archive in *.tar.gz; do
            echo "Checking $archive..."
            if tar -tzf "$archive" >/dev/null 2>&1; then
              echo "✓ $archive is valid"
            else
              echo "✗ $archive is corrupted"
            fi
          done
          
          cd ../../../..
      
      - name: Repair and validate macOS bundles
        run: |
          echo "=== Repairing and validating macOS bundles ==="
          cd src-tauri/target/release/bundle
          
          # 破損したアプリバンドルの修復を試行
          for app_file in *.app; do
            if [ -d "$app_file" ]; then
              echo "Validating $app_file..."
              
              # 基本的な構造チェック
              if [ ! -d "$app_file/Contents" ]; then
                echo "  ✗ Missing Contents directory - bundle is corrupted"
                continue
              fi
              
              if [ ! -d "$app_file/Contents/MacOS" ]; then
                echo "  ✗ Missing MacOS directory - bundle is corrupted"
                continue
              fi
              
              # 実行可能ファイルの確認
              exe_count=0
              for exe in "$app_file/Contents/MacOS"/*; do
                if [ -f "$exe" ] && [ -x "$exe" ]; then
                  exe_count=$((exe_count + 1))
                fi
              done
              
              if [ $exe_count -eq 0 ]; then
                echo "  ✗ No executable files found - bundle is corrupted"
                continue
              fi
              
              echo "  ✓ Bundle structure is valid"
              echo "    Executable count: $exe_count"
            fi
          done
          
          cd ../../../..
      
      - name: Final integrity check before upload
        run: |
          echo "=== Final integrity check before upload ==="
          cd src-tauri/target/release/bundle
          
          # 作成されたアーカイブの最終確認
          echo "Created archives:"
          ls -la *.tar.gz
          
          # 各アーカイブの整合性を最終確認
          for archive in *.tar.gz; do
            echo "Final check of $archive..."
            if tar -tzf "$archive" >/dev/null 2>&1; then
              echo "✓ $archive is ready for upload"
              # アーカイブの内容を少し表示
              echo "  Contents preview:"
              tar -tzf "$archive" | head -5
            else
              echo "✗ $archive is corrupted - will not upload"
              # 破損したアーカイブを削除
              rm -f "$archive"
            fi
          done
          
          cd ../../../..
      
      - name: Upload Tauri artifacts (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: tauri-build-macos
          path: |
            src-tauri/target/release/bundle/*.tar.gz
            src-tauri/target/release/bundle/macos-bundle.tar.gz
          retention-days: 90
          if-no-files-found: warn

  # Tauriビルドジョブ（Windows）（mainブランチプッシュ時のみ）
  tauri-build-windows:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build-and-deploy, save-build-artifacts]
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Verify Web build completion
        run: |
          echo "=== Verifying Web build completion ==="
          echo "Web build and deploy job completed successfully"
          echo "Proceeding with Tauri build for Windows..."
          echo "=========================================="
      
      - name: Check package.json scripts
        run: |
          echo "=== Checking package.json scripts ==="
          echo "Using simplified Tauri scripts without cross-env"
          echo "Scripts: tauri:build, tauri:build:linux, tauri:build:macos, tauri:build:windows"
          echo "Environment variables set in GitHub Actions workflow"
          echo "================================================="
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
      
      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli
      
      - name: Check build environment (Windows)
        run: |
          echo "=== Checking build environment (Windows) ==="
          echo "Node version: $(node --version)"
          echo "Rust version: $(rustc --version)"
          echo "Current directory: $(pwd)"
          echo "Target: x86_64-pc-windows-msvc"
          echo "======================================="
      
      - name: Check Tauri configuration and icons
        run: |
          echo "=== Checking Tauri configuration ==="
          echo "Current directory: $(pwd)"
          echo "Tauri config exists: $(Test-Path src-tauri/tauri.conf.json)"
          echo "Icons directory exists: $(Test-Path src-tauri/icons)"
          if (Test-Path src-tauri/icons) {
            echo "Icons found:"
            Get-ChildItem src-tauri/icons -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }
          }
          echo "====================================="
      
      - name: Generate Windows icons if missing
        run: |
          echo "=== Generating Windows icons ==="
          
          # iconsディレクトリが存在しない場合は作成
          if (-not (Test-Path src-tauri/icons)) {
            New-Item -ItemType Directory -Path src-tauri/icons -Force
            Write-Host "Created icons directory"
          }
          
          # 基本的なアイコンファイルが存在しない場合は生成
          $iconFiles = @("icon.ico", "icon.icns", "icon.png")
          $missingIcons = @()
          
          foreach ($icon in $iconFiles) {
            if (-not (Test-Path "src-tauri/icons/$icon")) {
              $missingIcons += $icon
            }
          }
          
          if ($missingIcons.Count -gt 0) {
            Write-Host "Missing icons: $($missingIcons -join ', ')"
            Write-Host "Creating placeholder icons..."
            
            # 基本的なPNGアイコンを作成（32x32）
            $pngPath = "src-tauri/icons/icon.png"
            # PowerShellで簡単なPNGファイルを作成（1x1ピクセルの透明画像）
            $bytes = [System.Convert]::FromBase64String("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==")
            [System.IO.File]::WriteAllBytes($pngPath, $bytes)
            Write-Host "Created placeholder icon.png"
            
            # 他のアイコンファイルも作成
            Copy-Item "src-tauri/icons/icon.png" "src-tauri/icons/icon.icns" -Force
            Write-Host "Created placeholder icon.icns"
            
            # .icoファイルは複雑なので、PNGから変換を試行
            try {
              # ImageMagickが利用可能な場合は変換
              if (Get-Command magick -ErrorAction SilentlyContinue) {
                magick "src-tauri/icons/icon.png" "src-tauri/icons/icon.ico"
                Write-Host "Converted icon.ico using ImageMagick"
              } else {
                # 基本的な.icoファイルを作成
                Copy-Item "src-tauri/icons/icon.png" "src-tauri/icons/icon.ico" -Force
                Write-Host "Created placeholder icon.ico"
              }
            } catch {
              Write-Host "Failed to create .ico file, using PNG as fallback"
              Copy-Item "src-tauri/icons/icon.png" "src-tauri/icons/icon.ico" -Force
            }
          } else {
            Write-Host "All required icons found"
          }
          
          # アイコンファイルの最終確認
          Write-Host "=== Final icon check ==="
          Get-ChildItem src-tauri\icons -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }
          
          # Tauri設定ファイルのアイコンパス確認
          Write-Host "=== Tauri config icon paths ==="
          $config = Get-Content src-tauri\tauri.conf.json | ConvertFrom-Json
          $config.bundle.icon | ForEach-Object { Write-Host "  $_" }
          
          echo "=== Icons generation completed ==="
      
      - name: Build Tauri app (Windows)
        env:
          VITE_TAURI_PLATFORM: windows
          TAURI_PLATFORM: windows
          NODE_ENV: production
          RUST_BACKTRACE: 1
        run: |
          echo "=== Building Tauri app for Windows ==="
          echo "VITE_TAURI_PLATFORM: $VITE_TAURI_PLATFORM"
          echo "TAURI_PLATFORM: $TAURI_PLATFORM"
          echo "NODE_ENV: $NODE_ENV"
          echo "Using simplified script without cross-env"
          
          # アイコンファイルの最終確認
          echo "=== Final icon check ==="
          Get-ChildItem src-tauri/icons -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }
          
          # Tauriビルドの実行
          echo "=== Starting Tauri build ==="
          
          # アイコンファイルの存在を最終確認
          $iconExists = Test-Path "src-tauri\icons\icon.ico"
          if ($iconExists) {
            Write-Host "✓ icon.ico found, proceeding with build"
            yarn tauri:build:windows
          } else {
            Write-Host "✗ icon.ico not found, attempting fallback build"
            
            # アイコンファイルなしでビルドを試行
            $env:TAURI_BUNDLE_ICON = "false"
            yarn tauri:build:windows
          }
      
      - name: List Tauri build outputs
        run: |
          echo "=== Tauri build outputs ==="
          dir src-tauri\target\release
          echo "=== Tauri bundle outputs ==="
          dir src-tauri\target\release\bundle
          echo "=== Icons used for build ==="
          dir src-tauri\icons
          echo "=== Tauri configuration ==="
          Get-Content src-tauri\tauri.conf.json | Select-String "icon"
      
      - name: Upload Tauri artifacts (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: tauri-build-windows
          path: |
            src-tauri/target/release/bundle/**/*.msi
            src-tauri/target/release/bundle/**/*.exe
          retention-days: 90
          if-no-files-found: warn

  # リリース作成時にビルド成果物をリリースにアップロードするジョブ
  upload-to-release:
    if: github.event_name == 'release'
    needs: [save-build-artifacts, tauri-build-linux, tauri-build-macos, tauri-build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-dist
          path: ./dist
      
      - name: Download Tauri artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: tauri-build
          path: ./tauri-build-linux
      
      - name: Download Tauri artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: tauri-build-windows
          path: ./tauri-build-windows
      
      - name: Download Tauri artifacts (macOS)
        uses: actions/download-artifact@v4
        with:
          name: tauri-build-macos
          path: ./tauri-build-macos
      
      - name: Create release archive
        run: |
          echo "=== Creating release archive ==="
          cd dist
          tar -czf ../release-${GITHUB_REF_NAME}.tar.gz .
          cd ..
          ls -la release-${GITHUB_REF_NAME}.tar.gz
          
          echo "=== Creating Tauri release archive (Linux) ==="
          cd tauri-build-linux
          tar -czf ../tauri-release-linux-${GITHUB_REF_NAME}.tar.gz .
          cd ..
          ls -la tauri-release-linux-${GITHUB_REF_NAME}.tar.gz
          
          echo "=== Creating Tauri release archive (macOS) ==="
          cd tauri-build-macos
          
          # 圧縮されたファイルを確認
          echo "Available files:"
          ls -la
          
          # 個別の圧縮ファイルと全体アーカイブを作成
          tar -czf ../tauri-release-macos-${GITHUB_REF_NAME}.tar.gz .
          cd ..
          ls -la tauri-release-macos-${GITHUB_REF_NAME}.tar.gz
          
          echo "=== macOS release archive created successfully ==="
          
          echo "=== Creating Tauri release archive (Windows) ==="
          cd tauri-build-windows
          tar -czf ../tauri-release-windows-${GITHUB_REF_NAME}.tar.gz .
          cd ..
          ls -la tauri-release-windows-${GITHUB_REF_NAME}.tar.gz
      
      - name: Upload Web Release to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release-${GITHUB_REF_NAME}.tar.gz
          asset_name: release-${GITHUB_REF_NAME}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Tauri Release (Linux) to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./tauri-release-linux-${GITHUB_REF_NAME}.tar.gz
          asset_name: tauri-release-linux-${GITHUB_REF_NAME}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Tauri Release (macOS) to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./tauri-release-macos-${GITHUB_REF_NAME}.tar.gz
          asset_name: tauri-release-macos-${GITHUB_REF_NAME}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Tauri Release (Windows) to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./tauri-release-windows-${GITHUB_REF_NAME}.tar.gz
          asset_name: tauri-release-windows-${GITHUB_REF_NAME}.tar.gz
          asset_content_type: application/gzip
